문제 : 14500번 '테트로미노' (난이도 골드 5)
풀이 시간 : 1시간 16분 16초
한줄평 : 무려 알고리즘 정리만 52분 걸린 문제이다. 다르게 말하면, 알고리즘 정리에 걸린 시간에 비해 24분이라는 짧은 코딩시간을 가질 수 있었다. 이번 코딩을 통해 느낀 것은 조금 복잡해 보이는 문제일 지라도 천천히 정리하다 보면 길이 보인다는 것이고, 시간이 좀 걸리더라도 여유를 가지고 탄탄하게 알고리즘을 정리해 두면 코딩과정에서 매우 편해질 뿐만 아니라, 코드도 간결해지고 더 정확하고 정신적으로도 덜 힘들다는 것이다.
 
 
---알고리즘 정리---
[핵심 아이디어]
한 칸에서 시작하여 상하좌우를 탐색한 뒤, 탐색한 칸에서 나올 수 있는 경우의 수가 가장 큰 칸을 선택한 뒤 현재 칸과 그 칸를 더한다.
이를 통해 가장 큰 칸을 찾는다.
 
이어 붙일 수 있는 정사각형이 i개 남은 (n, m) 칸을 탐색할 때는 다음의 경우를 탐색하면 된다.
1. 이미 정사각형이 있는 칸을 제외하고 상하좌우 칸 중 i개를 선택하여 뽑을 수 있는 가장 큰 합을 저장한다.
2. 이미 정사각형이 있는 칸을 제외하고 상하좌우 칸 중 1번 과정을 i-1개로 실행한다. 그 뒤 가장 큰 값을 저장한다.
3. 1, 2번 과정에서 저장한 값을 비교하여 더 큰 값을 리턴하면 된다.
 
따라서, 다음처럼 실행하는 함수를 모든 칸에서 실행하면 원하는 결과를 얻을 수 있을 것이다.
int searchMax(int x, int y, int level) (x, y는 좌표, level은 주변을 탐색할 수 있는 수치로 level-1개 만큼 주변을 탐색할 수 있다.)
1. x, y좌표를 check해 줌으로써 후에 중복을 방지한다.
2. (x-1, y) / (x+1, y) / (x, y-1) / (x, y+1) 좌표값 중 큰 순서로 level-1개를 선택해 그 합을 저장한다. (sum의 초기값은 x, y좌표의 값이다.)
3. searchMax(X, Y, level -1)값 중 가장 큰 값을 저장한다. (max)(X, Y는 2번과정에서 탐색한 좌표와 같다.)
4. sum, max값을 비교하여 더 큰 값을 리턴한다.
 
[알고리즘 흐름(메인함수)]
1. n, m을 입력받는다.
2. settingBoard(n, m)
3. max = searchBoard(n, m)
4. max 출력
 
[함수 세부 내용]
-void settingBoard(int n, int m)-
1. 다음 과정을 n번 반복한다. (r)
 1.1. 다음 과정을 m번 반복한다. (c)
  1.1.1. board[r][c]를 입력받는다.
2. 0~n+1을 반복한다. checkBoard[i][0,m+1] = 1;
3. 0~m+1을 반복한다. checkBoard[0, n+1][i] = 1;
4. return;
 
-int searchBoard(int n, int m)-
1. 다음 과정을 n번 반복한다. (r)
 1.1. 다음 과정을 m번 반복한다. (c)
  1.1.1. temp = searchMaxTetromino(r, c, 4)
  1.1.2. temp값이 max값보다 큰 경우 max = temp
2. return max;
 
-int searchMaxTetromino(int n, int m, int level)
1. checkBoard[n][m] = 1;
2. level이 2 이상인 경우 다음 좌표를 탐색하며 max1을 저장한다. (모든 좌표는 checkBoard값이 1인 경우 생략한다.)
 2.1. (n+1, m) : searchMaxTetromino(n+1, m, level-1)
 2.2. (n-1, m) : searchMaxTetromino(n-1, m, level-1)
 2.3. (n, m+1) : searchMaxTetromino(n, m+1, level-1)
 2.4. (n, m-1) : searchMaxTetromino(n, m-1, level-1)
 2.5. 위 좌표의 값을 탐색하며 temp에 저장하고,  max과 temp를 비교하고 max < temp인 경우 max = temp
3. level이 2 이상인 경우 다음 좌표를 탐색하며 값을 저장한다. (모든 좌표는 checkBoard값이 1인 경우 값을 -1로 저장하고 생략한다.)
 3.1. value[0] = board[n+1][m]
 3.2. value[1] = board[n-1][m]
 3.3. value[2] = board[n][m+1]
 3.4. value[3] = board[n][m-1]
4. 0~2까지 반복한다. (i)
 4.1. i~3까지 반복한다. (j)
  4.1.1. value[i] < value[j]인 경우 value[i], value[j]의 위치를 바꾼다.
5. sum = board[n][m], level--
6. 0~level-1 반복하며 sum += value[i]
7. max < sum인 경우 max = sum
8. checkBoard[n][m] = 0;
9. max를 리턴한다.