문제 : 1920번 수 찾기 (난이도 : 실버 4)
학습시간 :  54분 27초
 
----------알고리즘------------
[프로그램의 흐름]
1. 자연수 n을 입력받는다.
2. n개의 정수를 입력받는다.(num[100000])
3. num값들을 오름차순으로 정렬한다.(mergeSort(0, n))
4. m을 입력받는다.
5. m번만큼 다음을 반복한다.
 5.1. inputNum을 입력받는다.
 5.2. num에 inputNum이 있는지 확인한다. (checkNum(inputNum, 0, n))
 5.3. num에 inputNum이 있을 경우 1을, 그렇지 않으면 0을 출력한다.
 
[함수 내용]
-void mergeSort(int start, int end)-
1. start>end일 경우 즉시 return한다.
2. mid = (start + end) / 2
3. mergeSort(start, mid) / mergeSort(mid+1, end)
4. i = start, j = mid + 1, k = start
5. k>end가 될 때 까지 다음을 반복한다.(for(; k<=end; k++)) 
 5.1. num[i], num[j]값을 비교한다.
  5.1.1. num[i]값이 더 클 경우 sortNum[k] = num[i++];
  5.2.2. num[j]값이 더 클 경우 sortNum[k] = num[j++];
 5.2. 만약 i>mid일 경우 k++한 후 break한다.
 5.3. 만약 j>end일 경우 k++한 후 break한다.
6. i>mid인 경우 j<=end일 동안 sortNum[k++] = num[j]를 한다. (for(; j<=end; j++))
7. j>end인 경우 i<=mid일 동안 sortNum[k++] = num[i]를 한다. (for(; i<=mid; i++))
8. start~end까지 반복하며 num[k] = sortNum[k]를 한다. (for(k=start; k<=end; k++))
 
-int checkNum(int inputNum, int start, int end)-
1. start<end인 동안 다음 과정을 반복한다. (while(start<end))
 2.1. mid = (start + end) / 2
 2.2. num[mid]와 inputNum을 비교한다.
  2.2.1. num[mid] == inputNum인 경우 즉시 return 1;
  2.2.2. num[mid] < inputNum인 경우 end = mid - 1;
  2.2.3. num[mid] > inputNum인 경우 start = mid + 1;
3. return 0;