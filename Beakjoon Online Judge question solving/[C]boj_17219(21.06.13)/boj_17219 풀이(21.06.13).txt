문제 : 17219 '비밀번호 찾기' (난이도 실버4)
풀이시간 : 50분 32초
한줄평 : 문자열 비교를 통한 간단한 정렬 및 이분탐색을 이용하면 쉽게 풀 수 있는 문제였다.
 
----알고리즘----
[핵심 아이디어]
주소에 따른 비밀번호를 저장한다. 
그 후 주소를 찾을때는 strcmp를 사용하되 이분탐색을 사용할 수 있으면 베스트이다.
따라서, 주소를 중심으로 정렬하면 편할 것이다.
 
[알고리즘 흐름]
1. n, m을 입력받는다.
2. n개의 사이트 주소와 비밀번호를 입력하고 site[i].address, site[i].password에 저장한다.
3. mergeSort(0, n-1);
4. m번 반복하며 사이트 주소를 입력한다. (inputAddress)
5. size[findPassword(inputAddress, n-1)].password를 출력한다.
 
[함수 세부 내용]
-void mergeSort(int start, int end)-
0. start >= end인 경우 return한다.
1. mid = (start + end) / 2
2. mergeSort(start, mid), mergeSort(mid+1, end)
3. i = start, j = mid, k = start
4. k번 반복하며 strcmp(site[i].address, site[j].address)값에 따라 다음을 실행한다.
 4.1. -1인 경우 sortedSite[k].address(password) = site[i++].address(password)
 4.2. 1인 경우 sortedSite[k].address(password) = site[j++].address(password)
 4.3. i > mid 혹은 j > end인 경우 반복을 중단한다.
5. i>mid인 경우 j를 end까지, j>end인 경우 i를 mid까지 반복하며 sortedSite[k++].address(password)에 저장한다.
6. site = sortedSite
 
-int findPassword(char inputAddress[30], int max)-
1. min = 0, mid = (min + max) / 2
2. min<=max인 동안 다음을 반복한다.
 2.1. strcmp(inputAddress,site[mid].address)값에 따라 다음을 실행한다.
  2.1.1. -1인 경우 max = mid - 1;
  2.1.2. 1인 경우 min = mid + 1;
  2.1.3. 0인 경우 mid 리턴
 2.2. mid = (min + max) / 2
3.오류를 출력하며 return 0