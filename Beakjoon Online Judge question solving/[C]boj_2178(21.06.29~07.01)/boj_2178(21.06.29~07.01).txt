문제 : 2178번 '미로 탐색' (난이도 실버 1)
풀이 시간 : 39분 23초
한줄평 : 이제는 너무나도 익숙한 미로탐색 문제이다. 단지, BFS가 귀찮다는 이유로 DFS로 풀다가 시간초과가 나서 다시 BFS로 만드느라 시간이 좀 걸렸따.
 
----알고리즘----
[핵심 아이디어]
DFS를 이용하여 문제를 해결한다.
특정 칸에서 탐색할 때 해당 칸의 check를 1로 바꾼 뒤, 상하좌우를 탐색한다.
상하좌우에서 check == 0이고 해당 칸의 값이 1이 아닌 곳을 탐색하면 된다.
미로의 값을 받을 때에는 문자열로 입력을 받은 뒤 문자를 하나하나 따로 저장하도록 한다.
 
[알고리즘 흐름]
1. n, m을 입력받는다.
2. n번 반복하면서 다음을 실행한다. (r, 1~n반복)
 2.1. input을 입력받는다.
 2.2. updateBoard(r, m)을 실행한다.
3. searchMaze()를 출력한다.
 
[함수 세부내용]
-void updateBoard(int line, int length)
1. 1~length만큼 반복하며 다음을 실행한다.(i)
 1.1. (int)(input[i]-'0')값을 board[line][i]에 저장한다.
2. return
 
-int searchMaze()
1. checkBFS[1][1] = 1;
2. searchStack[now][stackTop[now]][0, 1] = 1, 1
3. stackTop[now] != -1인 동안 다음을 반복한다.
 3.1. level ++
 3.2. stackTop[now] != -1인 동안 다음을 반복한다.
  3.2.1. R = searchStack[now][stackTop[now]][0]
  3.2.2. C = searchStack[now][stackTop[now]--][1]
  3.2.3. 다음 좌표들을 R1, C1이라 두었을 때 checkBFS[R1][C1] == 0, board[R1][C1] == 1인 경우만 다음을 실행한다.
   좌표 : (R+1, C) / (R-1, C) / (R,C+1) / (R, C-1)
   3.2.3.1. checkBFS[R1][C1] = 1;
   3.2.3.2. searchStack[next][++stackTop[next]][0, 1] = R1, C1
   3.2.3.3. 만약 탐색하는 좌표가 n, m인 경우 level+1을 리턴
 3.3. now, next 체인지