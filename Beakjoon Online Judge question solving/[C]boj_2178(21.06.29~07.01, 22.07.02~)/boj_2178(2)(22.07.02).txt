문제 : 2178 미로탐색(실버 1)
풀이 시간 : 51m 17s

[아이디어]
미로의 최단 길을 찾는 아주 간단한 BFS문제이다.
문제의 핵심은 1, 1에서 N,M위치로 이동하는 최소의 칸 수를 구하는 프로그램이다.
N, M은 각각 2~100사이의 숫자로 제공된다.
미로는 숫자가 붙어서 입력으로 주어지기 때문에 문자열에서 문자 하나하나를 분리해낼 필요가 있어 보인다.
항상 도착위치로 이동할 수 있는 경우만 입력으로 주어지기 때문에 도착지점이 없는 경우는 따로 만들지 않아도 된다.

이 문제에서 해결해야 하는 핵심은
1. BFS를 통한 최소 칸 구하기
2. 주어진 미로의 정보를 파악한 뒤 사용할 수 있는 정보로 가공하기

1.BFS를 통한 최소 칸 구하기
 0) 이동횟수 +1
 1) 탐색할 위치를 담는 변수로 부터 좌표를 받아온다. (맨 처음에는 (1, 1)이 들어있다.))
 2) 받아온 좌표를 (n, m)이라고 했을 때 다음의 좌표 값이 1인지 확인한다.
  > (n-1, m) / (n+1, m) / (n, m-1) / (n, m+1)
 3) 확인한 좌표 값이 1인 경우 해당 좌표를 탐색예정좌표로 변수에 저장한다.
 4) 현재 n, m위치의 값을 -1로 바꾼다.
 5) 변수에 남아있는 좌표도 1~4과정을 반복한다.
 6) 탐색예정좌표가 담긴 변수에 (-1, -1)을 추가하여 다음 탐색에서 추가되는 좌표와 구분되게 한다.

2. 주어진 미로의 정보를 파악한 뒤 사용할 수 있는 정보로 가공하기
 1) 주어진 미로값을 문자열 형태로 받는다. (String은 아직 모르니 생략한다.)
  > M+1길이의 문자열을 N번 받으면 된다.
 2) 문자열의 문자값을 하나하나 확인하며 다른 변수에 저장한다.
  > 이 때 (1, 1)의 값은 배열의 [1][1]에 저장하면 된다.
 3) 테두리 부분이 0으로 저장될 수 있도록 미로값을 저장하는 변수는 1칸씩 추가로 확보한다. (벽확인을 위해)

이제 변수명을 정해보자.
이동 횟수 : int move_count
미로 값 : int** maze_val[~102][~102] (동적할당, 각각 M, N으로 할당예정)
탐색예정좌표 : Pos* searchPos[~10000] (동적할당, N*M으로 할당예정) (Pos는 int r, int c 값을 갖는다.) 
가공 전 미로 값 : char** maze_oriVal[~102][~102]