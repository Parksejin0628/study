문제 : 25682번 "체스판 다시 칠하기 2" (난이도 골드 5)
풀이 시간 : 1시간 56분
[풀이 방법]
1. N, M, K를 입력받는다.
2. N(1~N)번 만큼 반복하며 문자열의 형태로 보드판의 정보를 받는다.
 2.1. 문자열의 인덱스 0~M-1를 훑어보며 board[N][M+1]에 정보를 저장한다.
  2.1.1. B일 경우 0을
  2.1.2. W일 경우 1을
 2.2. board에 정보를 저장할 때 누적합도 같이 계산한다.
  2.2.1. board[r][c]라고 가정할 때 r+c가 짝수인 경우와 홀수인 경우로 나눠서 계산한다.
  2.2.2. r+c가 짝수인 경우
   2.2.2.1. board[r][c] = 0 인 경우 prefixSum_blackStart_row ++;
   2.2.2.2. board[r][c] = 1 인 경우 prefixSum_whiteStart_row ++;
  2.2.3. r+c가 홀수인 경우
   2.2.3.1. board[r][c] = 0 인 경우 prefixSum_whiteStart_row++;
   2.2.3.2. board[r][c] = 1 인 경우 prefixSum_blackStart_row ++;
  2.2.2. prefixSum_blackStart[r][c] = prefixSum_blackStart[r-1][c] + prefixSum_blackStart_row;
  2.2.3. prefixSum_whiteStart[r][c] = prefixSum_whiteStart[r-1][c] + prefixSum_whiteStart_row;
3. (M,N) ~ (k, k)를 탐색하도록 반복문을 짜며 모든 구간합을 확인한다.
 3.1. 현재 좌표가 (r, c)라고 하면 prefixSum_blackStart[r][c] - prefixSum_blackStart[r-k-1][c] - prefixSum_blackStart[r][c-k-1] + prefixSum_blackStart[r-k-1][c-k-1]
       공식을 통해 구간합을 구한다.
 3.2. k*k - (3.1에서 구한 구간합) < min 인 경우 min을 갱신한다.
 3.3. prefixSum_whiteStart에서도 위와 같이 진행한다.
4. min을 출력한다.

[메모]
문제만 봤을 때에는 이 문제가 구간합 문제라는 것이 와닿지가 않는다.
홀수 칸에 B/W 개수, 짝수 칸에 B/W 개수를 누적합을 남긴 뒤 
원하는 칸에 구간합이 제일 큰 곳을 고르면 되는걸까?

만약, 1칸 1칸 브루트포스로 탐색하면서 칠해야 하는 정사각형의 개수를 확인한 후
가장 작은 값을 출력하도록 바꾸면 어떻게 될까?
탐색해야 하는 경우의 수를 확인해보자.
N,M은 최대 값이 2000이다. 따라서, 확인해야 하는 칸은 2,000 * 2,000 = 4,000,000 일 것이다.
물론 구하고자 하는 K 값에 따라 테두리 부분은 확인할 필요가 없는 부분이 생기게 된다.
예를 들어 N, M이 10이고 K가 6인 경우 (6, 6) 칸은 확인할 필요가 없다.
K가 6이므로 (6~12, 6~12)를 탐색해야 하는데 N, M이 10이므로 넘어버리기 때문이다.
이처럼, K값에 따라 탐색할 필요가 없는 부분을 고려하면 최대로 탐색해야 하는 칸의 수는
(2,000 - k)^2 = k^2 - 4000k + 4,000,000 이 될 것이다.
그 다음으로 알아 볼 것은 한 칸을 기준으로 탐색할 때 필요한 연산의 수이다.
이는 간단하다. k^2이다. 예를 들어, k가 3일 경우 3*3 = 9칸을 확인해봐야 한다.
칸마다 k^2만큼 확인하고 연산해야 한다.
따라서, 총 필요한 연산의 수는
k^2 * (k^2 - 4000k + 4,000,000)
계산해본 결과 k가 1,000일 때 대략 1,000,000,000,000으로 1조번의 연산이 필요하다..
브루트포스는 포기하도록 하자!

처음에 냈던 아이디어 처럼, 누적합을 저장한 뒤 모든 구간합을 구하고 가장 큰 것을 고르면 될 것 같다.
왼쪽 위가 B로 시작하는 경우, W로 시작하는 경우로 나눠서 누적합을 계산하면 될 것이다.
구간합은 단순한 연산 하나로 구할 수 있기 때문에 
k^2번 만큼의 연산이 필요 없어 4,000,000이 최대로 필요한 연산일 것이다.
누적합은 다음 두 가지 경우를 계산한다.
좌표 (x, y)가 있을 경우 
1) x+y가 짝수인 경우가 B, 홀수인 경우가 W
2) x+y가 짝수인 경우가 W, 홀수인 경우가 B

이렇게 누적합을 해두고 특정 구간합이 가장 큰 구간을 찾으면 원하는 답이 나올 것이다.
(M, N) 좌표에서 내려오는 방식으로 (k, k)까지 구간합을 구하면서 구간합이 가장 큰 구간을 찾는다.
좌표 (x, y) 에서 구간합을 구한다고 생각하면
(x, y)누적합 - (x-k, y)누적합 - (x, y-k)누적합 + (x-k, y-k)누적합 으로 구하면 된다.

대략적인 풀이방법은 이러하다 
1. M, N, K를 입력 받는다.
2. 체스판의 정보를 입력받는다.
   이 때 정보를 입력받으면서 B = 0, W = 1로 치환하여 저장한다.
3. B=0, W=1을 치환하는 과정에서 누적합을 저장한다.
   누적합은 행 누적합, 총 누적합으로 나누어 저장한다.
   행 누적합은 현재 좌표의 값을 추가하면 되고
   총 누적합은 (x, y)누적합 + 행 누적합을 통해 계산한다.
   모든 누적합은 두 경우로 나누어서 저장한다.
4. (M, N)부터 (k, k)까지 탐색하며 
   (x, y)누적합 - (x-k, y)누적합 - (x, y-k)누적합 + (x-k, y-k)누적합
   공식을 통해 구간합을 구하며 (k*k - 구간합) 이 가장 작은 경우를 찾는다.
5. (k*k - 구간합) 이 가장 작은 경우의 값을 출력한다.

각 풀이법에 세부적인 내용을 추가해보자
1. N, M, K를 입력받는다.
2. N(1~N)번 만큼 반복하며 문자열의 형태로 보드판의 정보를 받는다.
 2.1. 문자열의 인덱스 0~M-1를 훑어보며 board[N][M+1]에 정보를 저장한다.
  2.1.1. B일 경우 0을
  2.1.2. W일 경우 1을
 2.2. board에 정보를 저장할 때 누적합도 같이 계산한다.
  2.2.1. board[r][c]라고 가정할 때 r+c가 짝수인 경우와 홀수인 경우로 나눠서 계산한다.
  2.2.2. r+c가 짝수인 경우
   2.2.2.1. board[r][c] = 0 인 경우 prefixSum_blackStart_row ++;
   2.2.2.2. board[r][c] = 1 인 경우 prefixSum_whiteStart_row ++;
  2.2.3. r+c가 홀수인 경우
   2.2.3.1. board[r][c] = 0 인 경우 prefixSum_whiteStart_row++;
   2.2.3.2. board[r][c] = 1 인 경우 prefixSum_blackStart_row ++;
  2.2.2. prefixSum_blackStart[r][c] = prefixSum_blackStart[r-1][c] + prefixSum_blackStart_row;
  2.2.3. prefixSum_whiteStart[r][c] = prefixSum_whiteStart[r-1][c] + prefixSum_whiteStart_row;
3. (M,N) ~ (k, k)를 탐색하도록 반복문을 짜며 모든 구간합을 확인한다.
 3.1. 현재 좌표가 (r, c)라고 하면 prefixSum_blackStart[r][c] - prefixSum_blackStart[r-k][c] - prefixSum_blackStart[r][c-k] + prefixSum_blackStart[r-k][c-k]
       공식을 통해 구간합을 구한다.
 3.2. k*k - (3.1에서 구한 구간합) < min 인 경우 min을 갱신한다.
4. min을 출력한다.
