문제 : 3190번 '뱀' (난이도 골드5)
풀이시간 : 2시간 36분 34초 (풀이중)
한줄평 : 진짜 게임 만드는 것과 비슷한 문제이기에 설계부터 작정하고 풀이를 시작했더니 상당히 시간이 오래걸렸다. 이 문제에서 틀린 이유를 찾는 시간이 꽤 걸렸는데, 컴파일러에서는 문제없이 지나가지만, 백준사이트에서는 돌아가지 않는 문제점이 있었기 때문이다. 
바로 posQueue[++rearIndex % QUEUE_SIZE].x 이 부분이었는데, ++rearIndex가 작용하지 않았고, 따로 rearIndex++문장을 추가하자 문제가 풀렸다. 이유가 무엇인지 탐색할 필요가 있다.
 + 이 부분에 대한 문제점은 크게 2가지가 있었다.
 첫째로, 전위 연산자가 대입연산자 왼쪽에 있었는데, 대입 연산자는 연산자의 우측부터 연산하므로 연산순서가 뒤로 늦어졌다.
 둘째로, 대입 연산자를 사용하면서 전위/후위 연산자를 사용하는 경우, 해당 연산자를 사용한 변수는 그 연산에서 2번이상 등장하면 안된다는 점이다.
  (ex) i = ++i는 전위 연산자를 받는 i가 연산에서 2번 등장하기에, 맞지 않는 연산이다.
  이 문제는 특히, 극단적으로 부정적인 결과를 가져올 수 있기 때문에 (하드디스크의 타격을 준다던지) 절대 사용하면 안되는 연산이다.
 
----알고리즘----
[핵심 아이디어]
-posQueue에 뱀의 몸통이 있는 좌표를 저장한다.
-평상시에는 표기된 규칙처럼 다음칸좌표를 enqueue한뒤 frontIndex를 dequeue하면 된다.
 단, 다음 칸 좌표에 사과가 있을 경우 즉, board[해당좌표x][해당좌표y] == 2인 경우 dequeue를 하지 않는다.
 enqueue할 때는 board[해당좌표x][해당좌표y] = 1, dequeue할 때는 0으로 한다.
-다음칸 좌표는 posQueue[rearIndex].x + dir[dirIndex].x, posQueue[rearIndex].y + dir[dirIndex].y이다. 
-dir의 좌표값은 다음과 같다.
dir[0].x = 1	dir[1].x = 0	dir[2].x = -1	dir[3].x = 0
dir[0].y = 0	dir[1].y = -1	dir[2].y = 0	dir[3].y = 1
-오른쪽으로 방향 전환을 할 경우 (D인 경우) ++dirIndex, 왼쪽으로 방향 전환을 할 경우 (L인 경우) --dirIndex를 한다.
-방향 전환을 할 때 마다 dirIndex = (dirIndex + 4) % 4를 실행한다.
-뱀이 움직일때마다 time++된다. (기존은 0)
-방향 전환의 시간 또한 큐로 저장하며, 큐의 frontIndex의 값은 뱀이 움직일때마다 --되어 0이 될 경우 해당 방향으로 전환한다.
-사과가 존재하는 좌표는 board[x][y] = 2이다.
-다음칸 좌표로 이동할 때마다 해당 좌표가 board[해당좌표x][해당좌표y]==1인 경우 time을 출력하고 프로그램을 종료한다.
 
[알고리즘 흐름]
1. n을 입력받는다.
2. k를 입력받는다.
3. k번 반복하며 좌표를 입력받는다. 해당 좌표를 X, Y라고 하면 board[X][Y] = 2로 한다.
4. l을 입력받는다.
5. l번 반복하며 rot.time, rot.dir을 입력받는다. (rotation rot)
6. settingGame()를 실행한다.
7 .moving()가 -1이 아닌 경우 다음 과정을 계속하여 반복한다.
 7.1. time++
 7.2. turning()
8. time+1를 출력한다.
 
[함수 세부내용]
-void settingGame(int n)-
1. board[0~n+1][0] = 1, board[0, n+1][1~n], board[0~n+1][n+1] = 1, board[1, 1] = 1를 한다.
2. position dir의 값을 다음으로 조정한다.
dir[0].x = 1	dir[1].x = 0	dir[2].x = -1	dir[3].x = 0
dir[0].y = 0	dir[1].y = -1	dir[2].y = 0	dir[3].y = 1\
3.posQueue[++rearIndex].x = 1, y = 1;
 
-int moving()-
1. posQueue[frontIndex] + dir좌표를 posQueue에 enqueue한다. 
 (이때부터 등장하는 frontIndex, rearIndex는 frontIndex%queueSize, rearIndex%queueSize를 의미한다.)
2. posQueue[rearIndex]의 좌표가 X, Y라 할 때 board[X][Y] == 1인 경우  -1를 return한다.
3. board[X][Y] = 1
4. board[X][Y] == 2인 경우 dequeue를 하지 않는다. 
5. board[X][Y] == 0인 경우 posQueue[frontIndex]좌표의 board값을 0으로 한 뒤posQueue를 dequeue한다.
 
-void turning()-
1.rot[rotIndex].time --한다.
2.만약 rot[rotIndex].time<=0인 경우 다음을 실행한다.
 2.1.rot[rotIndex].dir == 'D'인 경우 dirIndex++, dirIndex %=4;
 2.2.rot[rotIndex].dir == 'L'인 경우 dirIndex--, dirIndex += 4, dirIndex %= 4
 2.3.rotIndex++