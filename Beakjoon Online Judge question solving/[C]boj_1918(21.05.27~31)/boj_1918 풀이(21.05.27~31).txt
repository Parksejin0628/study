문제 : 1918번 '후위 표기식' (난이도 골드 4)
풀이시간 : 1시간 30분 정도로 추정 (측정 X)
한줄평 : 후위표기식을 약간 잘못 이해하여 조금 시간이 걸렸지만, 아이디어를 깔끔하게 정리해 무난하게 풀 수 있던 문제였다.
(하루에 20분정도밖에 투자를 안해서 5일이라는 긴 시간이 걸렸다)
 
[핵심 아이디어] 
계산식을 앞에서부터 살펴보며 피연산자인 경우는 바로 출력하고, 연산자를 만날 때 마다 다음 알고리즘으로 진행한다.
1) +, - 연산자를 만난 경우
 1.1) 연산자 스택이 빈 경우 해당 연산자를 연산자 스택에 저장한다.
 1.2) 연산자 스택이 빈 것이 아닌 경우 연산자 스택을 모두 pop, 그리고 해당 연산자를 연산자 스택에 저장한다.
2) *, / 연산자를 만난 경우
 1.1) 연산자 스택이 비었거나, 연산자 스택 top에 +, -가 있는 경우 해당 연산자를 연산자 스택에 저장한다.
 1.2) 연산자 스택의 top에 *, /가 있는 경우 해당 연산자를 출력한다. (연산자 스택은 건들지 않는다.)
3) (, ) 연산자를 만난 경우
 '('의 경우 현재 top을 현재 스택의 영점을 잡는다. (즉, 0인상태) 그 후 계속 진행한다. 
   -> 이를 통해 괄호안에서 식을 진행해 알고리즘에 걸려도 괄호 밖의 연산자는 영향을 받지 않는다.
 ')'의 경우 현재 스택의 연산자를 모두 출력한 뒤 영점을 해제한다.
 
[알고리즘 흐름]
1.표기식을 입력받는다.
2.표기식 문자열를 인덱스 0부터 '\0'이 올때까지 탐색한다.
3.문자를 탐색하며 탐색한 문자에 따라 다음 함수를 실행한다.
 3.1.문자가 '+'인 경우 plus()함수 실행
 3.2.문자가 '-'인 경우 minus()함수 실행
 3.3.문자가 '*'인 경우 multi()함수 실행
 3.4.문자가 '/'인 경우 division()함수 실행
 3.5.문자가 '('인 경우 open()함수 실행
 3.6.문자가 ')'인 경우 close()함수 실행
 3.7.나머지 문자는 그냥 출력한다.
 
[세부 함수내용]
-void plus()-
1. opStackTop <= standardStack[stStackTop]인 경우 opStack[++opStackTop] = '+'
2. opStackTop > standardStack[stStackTop]인 경우 opStack[opStackTop ~ standardStack[stStackTop]+1]까지 모두 출력, opStackTop = standardStack[stStackTop], opStack[++opStackTop] = '+'
 
-void minus()-
1. opStackTop <= standardStack[stStackTop]인 경우 opStack[++opStackTop] = '-'
2. opStackTop > standardStack[stStackTop]인 경우 opStack[opStackTop ~ standardStack[stStackTop]+1]까지 모두 출력, opStackTop = standardStack[stStackTop], opStack[++opStackTop] = '-'
 
-void multi()-
1. opStackTop <= standardStack[stStackTop]이거나 opStack[opStackTop] == '+', '-'인 경우 opStack[++opStackTop] = '*'
2. opStack[opStackTop] == '*', '/'인 경우 opStack[opStackTop] 출력, opStack[opStackTop] = '*'
 
-void division()-
1. opStackTop <= standardStack[stStackTop]이거나 opStack[opStackTop] == '+', '-'인 경우 opStack[++opStackTop] = '/'
2. opStack[opStackTop] == '*', '/'인 경우 opStack[opStackTop] 출력, opStack[opStackTop] = '/'
 
-void open()-
1. standardStack[++stStackTop] = opStackTop으로 한다. (standardStack[0] == standardStack[stStackTop], stStackTop == 0)
 
-void close()-
1. opStack[opStackTop ~ standardStack[stStackTop]+1]까지 모두 출력, stStackTop--;
 
A*B/C*D/E
((A*B)/C)