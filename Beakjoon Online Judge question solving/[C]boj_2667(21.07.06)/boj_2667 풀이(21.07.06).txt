문제 : 2667번 '단지번호 붙이기' (난이도 실버 1)
풀이시간 : 40분 51초
한줄평 : 매우 간단한 그래프탐색(DFS)문제였다. DFS, BFS문제를 많이 풀다보니 이제는 너무 쉽게 느껴진다.
 
 
----알고리즘----
[핵심아이디어]
DFS를 이용하여 check변수만 잘 활용하면 쉽게 풀 수 있는 문제인듯 하다.
(1,1)부터 탐색하다가 check == 0이고 값이 1인 수를 발견하면 탐색에 들어간다.
상하좌우 중에서 check == 0이고 값이 1인 수를 발견하면 다시 DFS로 탐색에 들어간다.
갯수는 전역변수로 따로 책정하고 모든 함수가 끝날 때 마다 단지 수를 바꿔주면 된다.
 
[알고리즘 흐름]
1. n을 입력받는다.
2. n번만큼 반복한다. (r)
 2.1. n번만큼 반복한다. (c)
  2.1.1. map[r][c]의 값을 입력받는다.
3. n번만큼 반복한다. (r)
 3.1. n번만큼 반복한다. (c)
  3.1.1. map[r][c] == 1 && checkDFS[r][c] != 1인 경우 searchMap(r, c, complex++) (complex는 원래 0)
4. mergeSort(0, complex-1);
5. sortedHouse[0~complex-1]를 출력한다.
 
[함수 세부내용]
- void searchMap(int row, int column, int complex) -
1. house[complex]++, checkDFS[row][column] = 1;
2. R, C의 값을 (row+1, column) / (row-1, column) / (row, column+1) / (row, column-1)로 바꾸며 다음을 실행한다.
 2.1. map[R][C] == 1 && cehckDFS[R][C] != 1인 경우 searchMap(R, C, complex)를 실행한다.
 
- void mergeSort(int start, int end)
1. start >= end인 경우 return한다.
2. mid = (start + end) / 2
3. mergeSort(start, mid) / mergeSort(mid+1, end)를 실행한다.
4. i = start, j = mid+1, k = start
5. start~end까지 반복한다. (k)
 5.1. i>mid 혹은 j>end인 경우 반복을 종료한다.
 5.2. house[i] < house[j]인 경우 sortedHouse[k] = house[i++]
 5.3. 그외의 경우 sortedHouse[k] = house[j++]
6. i>mid인 경우
 6.1. k~end까지 반복한다. (k)
  6.1.1. sortedHouse[k] = house[j++]
7. j>end인 경우
 7.1. k~end까지 반복한다. (k)
  7.1.1. sortedHouse[k] = house[i++]
8. start~end 까지 반복한다. (k)
 8.1. house[k] = sortedHouse[k]