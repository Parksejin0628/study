문제 : 16236번 '아기 상어' (난이도 골드 4)
풀이시간 : 1시간 32분 57초
한줄평 : BFS개념이 포함된 조금 복잡한 문제였다. 알고리즘 고안이 30분 정도 걸렸을 뿐만 아니라 간단한 논리적 실수 때문에 꽤 애먹어서 시간이 조금 오래 걸렸다. 하지만, BFS을 조금만 응용하면 쉽게 풀 수 있는 간단한 문제였다.
 
----알고리즘----
[핵심 아이디어]
이 프로그램에서 생각해야할 커다란 알고리즘은 가장 가까운 먹을 수 있는 물고기가 어디있는지 탐색하는 것이다.
1. 아기 상어는 먹을 수 있는 물고기가 있는지 탐색해야 한다.
 1.1. 먹을 수 있는 물고기는 자신의 크기보다 작은 물고기이다.
 1.2. 먹을 수 있는 물고기 중 가장 가까운 물고기를 먹는다.
2. 물고기 탐색은 BFS로 진행한다.
 2.1. BFS의 레벨은 곧 거리이며 먹을 수 있는 물고기를 발견한 레벨에서 탐색을 중단한다.
 2.2. 물고기를 발견하더라도 해당 레벨의 탐색은 계속한다. 
      그 후 레벨이 같은 물고기가 여러마리인 경우 y좌표가 가장 작은, x좌표가 가장 작은 물고기를 선택한다.
3. BFS의 과정은 다음과 같다.
 3.1. 첫 탐색 좌표는 현재 아기상어의 위치에서 탐색을 시작한다. 이때는 레벨을 0으로 한다.
 3.2. 해당 좌표의 물고기가 자신보다 작은 경우 해당 레벨에서 탐색을 중지한다.
 3.3. 탐색 좌표의 상하좌우 좌표를 탐색한다. 그 중 checkBFS가 0이고 물고기의 크기가 자신보다 작거나 같은 경우 해당 좌표를 탐색스택에 저장한다.
4. 탐색이 끝나고, 가장 작은 물고기의 좌표를 확인하면, 그 위치로 상어를 옮긴 뒤 시간을 더한다. 그 후 위의 과정을 다시 진행하면 된다.
 4.1. 이때 상어의 크기도 업데이트 해야한다.
5. 만약 탐색이 끝난 뒤에도 물고기가 없는 경우 시간을 출력한 뒤 프로그램을 종료한다.
 
 
[알고리즘 흐름]
1. n을 입력받는다.
2. initBoard()을 실행한다.
3. 그 후 n^2번 반복하며 공간의 상태를 받는다. (1~n번을 이중 반복)
4. 그 후 updateShark()가 -1을 리턴할때까지 반복한다.
 4.0. updateShark()값은 temp에 저장한다.
 4.1. time += temp
 4.2. 반복할 때마다 needFeed를 1씩 감소시킨다.
 4.3. needFeed가 0인 경우 sharkSize++, needFeed = sharkSize
5. time 출력 후 종료
 
[함수 세부내용]
-void initBoard(int boardSize)-
1. board[0, n+1][0~n+1] = -1
2. board[0~n+1][0, n+1] = -1
 
-int updateShark()-
1. stackTop[2] = {-1, -1}, level = 0, now = 0, next = 1로 초기화 한 뒤 searchStack[now][++stackTop[now]] = sharkPos;
2. stackTop[now] != -1 && find == 0인 동안 반복한다.
 2.1. stackTop[now] != -1인 동안 반복한다. (즉, 이중반복)
  2.1.1. searchTarget = searchStack[now][stackTop[now]--]
  2.1.2. X = searchTarget.x, Y = searchTarget.y
  2.1.3. checkBFS[X][Y] = 1인 경우 continue
  2.1.4. checkBFS[X][Y] = 1
  2.1.5. X, Y의 좌표를 탐색
   2.1.5.1. 해당 값의 좌표가 -1, sharkSize보다 큰 경우 continue
   2.1.5.2. 해당 값의 좌표가 sharkSize보다 작은 경우 find =1, nextFeed.x = X / nextFeed.y = Y
    2.1.5.2.1. 이미 find == 1인 경우 nextFeed.y보다 Y값이 더 작으면 업데이트, 같은 경우 nextFeed.x값보다 X가 작은 경우 업데이트
  2.1.6. X, Y좌표를 기준으로 상하좌우 좌표를 searchStack[next][++stackTop[next]]에 저장
 2.2. level++
 2.3. now, next값 변경
3. nextFeed의 좌표로 sharkPos 변경, 기존 sharkPos = 0
4. level 리턴