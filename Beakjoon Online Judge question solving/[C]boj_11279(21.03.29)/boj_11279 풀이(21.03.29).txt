문제 : 11279 최대힙 (난이도 실버2)
풀이시간 : 1시간 32분 54초 02 
한줄평 : 확실히 점점 문제를 풀기 위해서는 바탕이 되는 이론이 필요한 것이 느껴진다. 이번 풀이만 하더라도 이진트리와 힙구조를 몰랐다면 생각조차 못해봤을 문제였다.
          실버 2문제 조차 이론을 모르면 풀기 힘들다는 것을 생각해보면 앞으로는 이론을 먼저 찾아보고 그 다음 풀이를 시작하는 것도 괜찮다는 생각이 들었지만
          내가 배우고자 하는 것이 게임 프로그래밍을 위한 프로그래밍 논리력 향상인데 이론을 본격적으로 하는 것이 맞나? 하는 의문점이 든다.
          어쨌든 이번 문제의 핵심 이론은 이진 트리와 힙 구조, 우선순위 큐였다.
 
---알고리즘 정리---
[알고리즘 흐름]
1. n을 입력받는다.
2. 다음 과정을 n번만큼 반복한다.
3. x를 입력받고 입력받은 x의 값에 따라 다음 과정을 따른다.
 3.1. x가 0인 경우  deleteHeap()을 호출한다.
 3.2. x가 0이 아닌 자연수인 경우 addHeap(x)를 호출한다.
 
[함수 세부내용]
-void addHeap(int num)-
1. upHeap[index]에 num을 대입한다.
2. tempIndex = index를 한 뒤 다음 과정을 반복한다.
 2.1. upHeap[tempIndex/2] < num인 경우 upHeap[tempIndex] = upHeap[tempIndex/2], upHeap[tempIndex/2] = num
      , tempIndex /= 2
 2.2. upHeap[tempIndex/2] >= num인 경우 반복을 종료한다.
3. index++
 
-void deleteHeap()-
0. index = 1인 경우 0을 출력하고 리턴한다.
1. upHeap[1]를 출력, upHeap[1] = upHeap[--index], temp = upHeap[1], upHeap[index] = 0를 한다.
2. tempIndex = 1을 한 뒤 다음 과정을 반복한다.
 2.1. upHeap[tempIndex*2], upHeap[tempIndex*2+1] 모두 temp보다 큰 경우 둘 중 큰 숫자와 자리를 바꾼다.
 2.2. upHeap[tempIndex*2] > temp인 경우 자리를 바꾸고 tempIndex = tempIndex * 2를 하고 처음부터 반복한다.
      아닌 경우 다음으로 넘어간다.
 2.3. upHepa[tempIndex*2+1] > temp인 경우 자리를 바꾸고 tempIndex = tempIndex * 2 + 1를 하고 처음부터 반복한다.
      아닌 경우 다음으로 넘어간다.
 2.3. 반복을 종료한다.