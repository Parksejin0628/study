using System;

namespace OperatorStudy
{
    class MainApp
    {
        static void main(string[] args)
        {


        }
    }
}

/* [Chapter 04 데이터를 가공하는 연산자]
 * <4.2 산술 연산자>
 *  1. 산술 연산자는 수치 형식의 데이터를 다루는 연산자이다.
 *      - 정수 형식, 부동 소수점 형식, decimal 형식에 대해서만 사용 가능
 *  2. 산술 연산자의 종류
 *      +, -, *, /, %
 * <4.3 증가 연산자와 감소 연산자>
 *  1. 증가 연산자는 피연산자의 값을 1 증가시키고, 감소 연산자는 피연산자의 값을 1 감소시키는 단항연산자이다.
 *      - ++ : 피연산자의 값을 1 증가
 *      - -- : 피연산자의 값을 1 감소
 *  2. 증가/감소 연산자가 변수 앞에 사용되면 변수의 값을 변경한 후 해당 문장을 실행하는 '전위 증가/감소 연산자'이다.
 *  3. 증가/감소 연산자가 변수 뒤에 사용되면 문장이 실행된 후 변수의 값을 변경하는 '후위 증가/감소 연산자'이다.
 * <4.4 문자열 결합 연산자>
 *  1. 문자열과 함께 사용하는 + 연산자는 문자열 결합 연산자이다.
 *      ex) "res" + "ult" 의 결과는 "result"가 된다.
 * <4.5 관계 연산자>
 *  1. 관계 연산자는 두 피연산자 사이의 관계를 평가하는 연산자이다.
 *      - 관계 연산자의 반환 값은 참 혹은 거짓이다. (bool)
 *  2. 관계 연산자의 종류
 *      <, >, <=, >=, ==, !=
 * <4.6 논리 연산자>
 *  1. 논리 연산은 진리값이 피연산자인 연산이다. (진리값은 참, 거짓)
 *  2. 논리 연산자의 종류
 *      &&, ||, !
 * <4.7 조건 연산자>
 *  1. 조건 연산자는 피연산자가 3개인 연산자로 첫 번째 연산자는 조건식 두 번째, 세 번째 연산자는 반환값이 온다.
 *      - 조건식이 참일 경우 두 번째 피연산자가 반환되고, 거짓일 경우 세 번째 피연산자가 반환 되는 연산자이다.
 *          ex) bool temp = a==30 ? True : False;
 * <4.8 null 조건부 연산자>
 *  1. null 조건부 연산자는 객체의 멤버에 접근하기 전 해당 객체가 null인지 검사한 뒤 결과에 따라 지정한 값을 반환하는 연산자이다.
 *      - 연산자 : ?.
 *      - 사용법 : 객체?.멤버
 *      - 수행 기능 : 객체가 null인 경우 null 반환, 그렇지 않은 경우 ?. 뒤에 있는 멤버를 반환한다.
 *          ex) Foo foo; int? bar; bar = foo?.member; 라는 식이 있을 때 foo가 null인 경우 bar = null가 되는 것이고 foo가 null이 아닌 경우 bar = foo.member이 되는 것이다.
 *  2. ?[]도 ?.와 동일한 기능을 수행하나 컬렉션 객체의 첨자를 이용한 참조에만 사용된다. (배열처럼)
 *      ex) a?[0] 라는 문장이 있으면 a가 null인 경우 null 반환, null이 아닌 경우 a[0]을 반환하는 것이다.
 * <4.9 비트 연산자>
 *  1. 비트를 연산하기 위한 연산자이다.
 *  2. 비트 연산자의 종류
 *      - 시프트 연산자 (<<, >>) : 비트를 왼쪽이나 오른쪽으로 이동시키는 연산자
 *      - 논리곱 연산자 (&) : 두 피연산자의 비트 논리곱 수행
 *      - 논리합 연산자 (|) : 두 피연산자의 비트 논리합 수행
 *      - 배타적 논리합 연산자 (^) : 두 피연산자의 비트 베타적 논리합 수행
 *      - 보수 연산자 (~) : 피 연산자의 비트 반전 (단항 연산자)
 * <4.10 할당 연산자>
 *      1. 할당 연산자는 피연산자를 한 차례 가공한 후 변수 또는 상수에 피연산자 데이터를 할당한다.
 *      2. 할당 연산자의 종류
 *          =, +=, -=, *=, %=, &=, |=, ^=, <<=, >>=
 * <4.11 null 병합 연산자>
 *  1. null 병합 연산자는 두 개의 피연산자 중 왼쪽의 피연산자가 null인지 판단하여 null이 아닌 경우 왼쪽 피연산자를 반환, null인 경우 오른쪽 피연산자를 반환한다.
 *      - 연산자 : ??
 *      - 사용법 : 검사할 피연산자??null인 경우 반환할 피연산자
 *          ex) num ?? 0
 *      
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */