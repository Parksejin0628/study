#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct intro
{
	int age;
	double height;
};

int main(void)
{
	struct intro s1;
	
	printf("(1)\n");
	printf("나이 : ");
	scanf("%d", &s1.age);
	printf("키 : ");
	scanf("%lf", &s1.height); 
	printf("나이 : %d\n키 : %.1wlf\n", s1.age, s1.height);
	//struct를 통해 구조체를 선언하며 . 연산자를 통해 멤버에 접근한다. 
	
	fgetc(stdin);
	scanf("%d");
	return 0;
}


/*
[17장 사용자 정의 자료형]
<17.1 구조체>
17.1.1 구조체 선언과 멤버 사용
	- 구조체는 다양한 자료형을 하나로 묶을 수 있는 복합 자료형이다.
	- 구조체를 사용하기 위해서는 구조체의 형태를 컴파일러에게 미리 알려주는 형 선언을 해야 한다.
	- 형 선언은 struct 예약어를 사용하여 다음과 같이 선언한다. 
		> struct 구조체이름 { 구조체 멤버 }; 
		ex) struct student(구조체 이름) 
			{
				int num;(구조체 멤버) 
				double grade;(구조체 멤버) 
			}; 
	- 구조체는 보통 함수 밖에다가 선언한다.
		> 함수 안에다가 선언할 경우 해당 함수 안에서만 구조체를 사용할 수 있다.
	- 선언한 구조체는 struct 예약어와 구조체 이름을 함께 하나의 자료형처럼 취급하여 사용할 수 있다.
		ex) struct student s1; : s1이라는 이름을 가진 student자료형 변수 선언
	- 구조체 변수는 각 구조체 멤버들의 공간이 메모리에 연속으로 할당되기 때문에 변수의 크기가 각 멤버의 크기를 더한 값이 된다.
		ex) student구조체는 int, double자료형을 가진 멤버를 가지므로 12바이트를 할당한다.
		> 모든 시스템은 데이터를 빠르게 읽고 쓰기 위해 일정한 크기 단위로 메모리에 접근한다. \
		> 따라서, 구조체 멤버의 크기가 들쑥날쑥한 경우 멤버 사이에 패팅 바이트를 넣어 멤버들을 가지런히 정렬하는데 이를 바이트 얼라인먼트라고 한다.
		> 바이트 얼라인먼트는 크기가 가장 큰 멤버가 메모리를 할당하는 기준 단위가 된다.
		> 결국 student구조체는 int로 4바이트를 확보한 후 double의 공간을 확보하기 전 바이트 얼라인먼트로 4바이트의 패딩 바이트를 넣게 된다.
		> short는 2바이트, int는 4바이트로 끊어서 할당된다.
		> 이러한 특징을 생각하여 구조체 멤버의 순서를 조정하면 메모리를 아낄 수 있다. 
	- 구조체 변수에서 사용할 멤버에 접근할 때는 . 연산자를 사용한다.
		ex) s1.num = 2;
17.1.2 다양한 구조체 멤버
	- 구조체 멤버로 배열도 사용할 수 있다.
	- 구조체 멤버로 포인터도 사용할 수 있다.
		> 만약, 문자열 포인터를 사용할 경우 포인터에 동적할당으로 공간을 할당한 후 문자열을 저장해야 한다.
	- 구조체 멤버로 다른 구조체도 사용할 수 있다.
		> 단, 해당 구조체보다 먼저 선언된 구조체여야 한다. 
*/ 	
