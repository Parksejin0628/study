[리스트]
- 리스트 : 항목들을 차례대로 저장한 자료구조로 집합과 다르게 각 항목들이 순서 혹은 위치를 가지고 있다.
- 리스트의 대표적인 연산
 > insert(list, pos, item) : pos 위치에 요소를 추가한다.
 > delete(list, pos) : pos 위치의 요소를 제거한다.
 > clear(list) : 리스트의 모든 요소를 제거한다.
 > get_entry(list, pos) : pos위치의 요소를 반환한다.
 > get_length(list) : 리스트의 길이를 구한다.
 > is_empty(lsit) : 리스트가 비었는지를 검사한다.
 > print_list(list) : 리스트의 모든 요소를 표시한다.
- 리스트를 구현하는 방법은 크게 2가지가 있다.
 > 배열로 구현한 리스트 : 구현이 간단하고 속도가 빠르다. 하지만, 크기가 고정되어 메모리 공간 낭비, 공간 부족 등의 위험이 있고 리스트의 중간에 데이터를 삽입하거나 삭제시 기존 데이터들이 움직여야한다.
 > 연결리스트 : 구현이 복잡하고 임의의 항목 (i번째 항목) 추출시 시간이 많이 걸리지만, 크기 제한이 없고 중간에서 쉽게 삽입하거나 삭제할 수 있다.
 
[연결리스트]
- 연결리스트(linked list) : 연결 리스트는 줄로 연결된 상자라고 생각할 수 있다. 물리적으로 흩어져 있는 자료들을 서로 연결하여 하나로 묶는 방법이 연결리스트이다.
 > 이 때 상자를 연결하는 줄은 포인터(pointer)로 구현한다.
- 연결 리스트의 구조
 > 노드(node) : 데이터를 저장하는 공간이다. 줄로 연결된 상자에서 '상자'를 의미한다. 노드는 데이터 필드와 링크 필드로 구성되어 있다.
  - 데이터 필드 : 실제로 저장하고자 하는 데이터가 들어가는 공간이다.
  - 링크 필드 : 다른 노드를 가리키는 포인터가 저장된다.
 > 연결 리스트에서는 연결 리스트의 첫 번째 노드를 알아야 전체의 노드에 접근할 수 있다.
    따라서, 연결 리스트마다 첫 번째 노드를 가리키는 변수가 필요한데 이것을 헤드 포인터라고 한다.
- 연결 리스트의 종류
 > 단순 연결 리스트 : 하나의 방향으로만 연결되어 있는 연결 리스트이다. 체인(chain)이라고도 한다.
 > 원형 연결 리스트 : 단순 연결 리스트와 같으나 마지막 노드의 링크가 첫 번째 노드를 가리킨다.
 > 이중 연결 리스트 : 각 노드마다 2개의 링크가 존재하여 앞에있는 노드와 뒤에 있는 노드를 둘 다 가리킨다.