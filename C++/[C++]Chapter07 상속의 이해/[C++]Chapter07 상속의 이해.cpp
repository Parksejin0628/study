#include<iostream>

int main(void)
{
	
	
	return 0;
}

/*
[Chapter07 상속(Inheritance)의이해]
<7.1. 상속에 들어가기에 앞서> 
1. 상속을 배우기 앞서
 - 상속은 문법적 요소보다도 상속이 가져다 주는 이점, 상속을 적용해야 할 때를 아는 것이 중요하다.
 - 따라서, 상속이 필요하게 된 문제를 제공하며 학습을 시작한다.
2. 좋은 소프트웨어의 조건
 - 모든 소프트웨어 설계에 있어서 중요시하는 것 중 일부는 다음과 같다.
	> 요구사항 변경에 대응하는 프로그램의 유연성
	> 기능의 추가에 따른 프로그램의 확장성
 - 좋은 프로그램은 사용자의 추가 요구에 대처가 가능해야 한다.
 	> 다시 말해, 요구를 들어주기 위해 프로그램의 대부분을 고치는 일은 없어야 한다.
	ex) 고용직 관리 프로그램에서 고용직/영업직/임시직 관리 프로그램으로 확장될 때 기존 프로그램에 영업직/임시직 내용 추가를 위해 대부분의 함수를 건든다면 유연성/확장성이 좋은 것이 아니다.
	> 최대한 적은 부분의 수정으로 프로그램을 변경/확장 시킬 수 있어야 좋은 프로그램이라 할 수 있다. 
 - 물론, 100% 유연성과 확장성을 만족할 수는 없지만, 조금이라도 더 유연하게 노력할 뿐이다. 
 - 이러한 필요에 의해 '상속(Inheritance)'의 필요성이 제기되었다. 

*/
