#include<iostream>

using std::cout;
using std::cin;
using std::endl;

int main(void)
{


	return 0;
}

/*
[Chatper15 예외처리(Exception Handling)]
<15.1. 예외상황과 예외처리의 이해>
1. 예외(exception)
 1) 예외란?
	- 예외(exception)란 프로그램 실행 도중 문법적인 에러가 아닌 프로그램의 논리에 맞지 않는 상황을 의미한다.
		ex) cout<<a/b : ;가 빠졌지만 문법적인 에러기에 C++에서 말하는 예외가 아니다.
		ex) b=0, cout<<a/b; : 0으로 나누는 것은 불가능하지만 문법적인 에러가 아니기에 C++에서 말하는 예외이다.
		ex) 프로그래머가 a, b모두 양수인 것을 의도했지만 음수값이 들어오는 경우 프로그램의 논리(의도)와 다르기에 C++에서 말하는 예외이다.
2. 예외를 처리하는 방법
 1) if문을 통한 처리 방법
	- if문을 통해 논리적 오류가 있는지 찾는 방법이다.
		ex) a가 양수만 들어오기를 원할 때 if(a>=0) { cout<<"error"<<endl; } 이런식으로 논리적 오류를 검출해내는 것이다.
	- 문제점 : 해당 if문이 프로그램 흐름을 구성하는 코드인지, 단순 예외처리를 위한 코드인지 한 눈에 파악이 불가능하다.
		> 즉, 가독성이 떨어지고 이로인해 유지보수성이 떨어진다.
 2) try-catch-throw 처리 방법
	- try, catch, throw 키워드를 사용한 예외처리 방법이다.
	- C++에서 제공하는 예외처리 메커니즘이다.
	- if문을 통한 처리방법의 단점인 가독성과 유지보수성을 향상시킬 수 있다. 
		> try, catch, throw 키워드만 보아도 이 코드가 예외처리를 위한 코드인지 바로 파악이 가능하기 때문이다.
<15.2. C++의 예외처리 매커니즘>
1. 예외처리의 핵심 키워드
 1) try : 예외를 검사할 범위를 지정
	- 예외 발생을 검출할 코드의 범위를 지정한다. {}블록안에 코드 안에서 예외가 발생하면 (throw가 발생하면) catch문장을 실행시킨다.
		ex) try
			{
				코드...			<< 이 코드에서 예외 발생시 catch안에 있는 문장을 실행시킨다.
			}
 2) catch : 예외를 처리하는 코드
	- 예외 발생시 대처하는 코드가 있는 곳이다. {}블록안에 예외 발생시 처리할 코드를 넣는다. 예외 발생시 catch안에 있는 코드가 실행된다.
	- catch문에 들어가는 데이터는 마치 함수처럼 데이터의 복제본을 catch문장 안에서 사용할 수 있도록 해준다.
		ex) catch(예외와 관련된 데이터)
			{
				예외처리와 관련된 코드...
			}
	- 반드시 try문 바로 뒤에 있어야한다. try문과 catch문 사이에 어떤 문장이라도 있으면 컴파일에러가 발생한다.
		ex) try
			{
				코드
			}
			cout<<"끼어들기!"<<endl;		<<이 문장으로 인해 에러가 발생한다. 이 문장을 삭제해야 에러가 발생하지 않는다.
			catch(예외와 관련된 데이터)
			{
				예외처리 코드
			}
 3) throw : 예외 발생을 알림
	- 예외가 발생했음을 프로그램에 알리고 예외와 관련된 데이터를 catch문으로 전달한다.
	- 즉, throw문이 실행되면 catch문이 실행되는 것이다.
		ex) try안에서 throw a; 가 발생하면 catch(int exn){ ... } 문장이 실행된다.
2. 예외처리 과정에서의 코드흐름
 1) 예외발생시 코드 흐름
	- try안에 문장을 실행시킨다.
	- throw로 인해 예외가 발생함을 인지한다.
	- 즉시, try안에 문장을 중단시키고 catch문장을 실행시킨다.
	- catch문 이후 문장을 실행시킨다.
	- 즉, 예외발생시 마치 반복문의 break;처럼 try안에 문장을 중단시키며 되돌아가지 않는다.
 2) 전반적인 예외처리 과정에서의 코드 흐름
	- try 블록을 만나면 그 안에 코드를 순서대로 실행한다.
	- 예외가 발생하지 않는다면 try 안에 코드를 모두 끝낸 후 catch이후 문장을 실행한다.
	- 예외가 발생하면 try 안에 코드를 예외발생 지점에서 중단한 후 catch문장을 실행한다. 그 후 catch이후 문장을 실행한다.
*/